
class Solution {
    public Node cloneGraph(Node node) {
        if (node == null)
            return null;

        HashMap<Integer, Node> map = new HashMap<>();
        Queue<Node> queue = new LinkedList<>();

        Node copy = new Node(node.val);
        map.put(node.val, copy);
        queue.offer(node);

        while (!queue.isEmpty()) {
            Node curr = queue.poll();

            for (Node neigh : curr.neighbors) {
                if (!map.containsKey(neigh.val)) {
                    Node copyNeigh = new Node(neigh.val);
                    map.put(neigh.val, copyNeigh);
                    queue.offer(neigh);
                }
                map.get(curr.val).neighbors.add(map.get(neigh.val));
            }
        }

        return copy;
    }
}



class Solution {
    public Node cloneGraph(Node node) {
        
        if(node==null)return null;
        
        HashMap<Integer,Node> map = new HashMap<>();
        return clone(node,map);
    }
    
    Node clone(Node node, Map<Integer,Node>map ){
        
        // containsKey
        if(map.containsKey(node.val)){
            return map.get(node.val);
        }
        
        //doesnotcontainsKey - create new , put in map and recur for neighbors of original node i.e the one passes as paremeter
        Node copy = new Node(node.val);
        map.put(node.val,copy);
        
        for(Node neigh : node.neighbors)
        copy.neighbors.add (clone(neigh, map));  // open list of copy node neigh and add them(recur for original node neigh)
        
        
        return copy;
        
            
    }
}
